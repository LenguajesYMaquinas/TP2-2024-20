// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/task1.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class task1 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=4;
      GAutomataFrame.show($cast(gold.structures.automaton.IAutomaton.class,task1.createAutomaton()));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,task1.class,"main",$line);
    }
  }
  public static IAutomaton createAutomaton() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=11;
      Object Q=$fix($opCartsY(new Object[]{GCollections.asSet('<','>','='),$opUnionY($opIntvlY('0','9'),GCollections.asSet("10")),GCollections.asSet("initial","d1","bop1","dn","bopn","err")}));
      $line=19;
      Object \u03A3=$fix($opUnionY($opIntvlY('0','9'),GCollections.asSet('<','>','=')));
      $line=20;
      Object q=$fix(GCollections.asList('=',"10","initial"));
      $line=21;
      Object F=$fix($opCartsY(new Object[]{GCollections.asSet('<','>','='),$opUnionY($opIntvlY('0','9'),GCollections.asSet("10")),GCollections.asSet("dn")}));
      $line=23;
      $result=$invokeConstructor(GDeterministicAutomaton.class,new Object[]{Q,\u03A3,q,F,new GMethod(task1.class,"\u03B4")});
      if (true) break $try;
      $line=25;
      $rethrow(new RuntimeException("The function \"createAutomaton()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,task1.class,"createAutomaton",$line);
    }
    return $cast(IAutomaton.class,$result);
  }
  public static Object \u03B4(java.lang.Iterable $v1, Object character) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v2=GCollections.unmodifiableCollection($v1).iterator();
      Object simbolo=$v2.next();
      Object anterior=$v2.next();
      Object state=$v2.next();
      $line=30;
      Object numbersSet=$fix($opIntvlY('0','9'));
      $line=31;
      Object comparatorsSet=$fix(GCollections.asSet('=','<','>'));
      $line=33;
      if (($opEqualY(state,"initial")&&$opMembrY(character,numbersSet))) {
        $line=33;
        $result=GCollections.asList(simbolo,character,"d1");
        if (true) break $try;
      }
      else {
        $line=34;
        if (($opEqualY(state,"d1")&&$opMembrY(character,comparatorsSet))) {
          $line=34;
          $result=GCollections.asList(character,anterior,"bop1");
          if (true) break $try;
        }
        else {
          $line=35;
          if ((($opEqualY(state,"bop1")&&$opMembrY(character,numbersSet))&&$bool((($bool(($opEqualY(simbolo,'<')&&$opLesstY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character}))))))||$bool(($opEqualY(simbolo,'>')&&$opGreatY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character})))))))||$bool(($opEqualY(simbolo,'=')&&$opEqualY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character})))))))))) {
            $line=35;
            $result=GCollections.asList(simbolo,character,"dn");
            if (true) break $try;
          }
          else {
            $line=36;
            if (($opEqualY(state,"dn")&&$opMembrY(character,comparatorsSet))) {
              $line=36;
              $result=GCollections.asList(character,anterior,"bopn");
              if (true) break $try;
            }
            else {
              $line=37;
              if ((($opEqualY(state,"bopn")&&$opMembrY(character,numbersSet))&&$bool((($bool(($opEqualY(simbolo,'<')&&$opLesstY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character}))))))||$bool(($opEqualY(simbolo,'>')&&$opGreatY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character})))))))||$bool(($opEqualY(simbolo,'=')&&$opEqualY(Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{anterior}))),Integer.parseInt($cast(java.lang.String.class,$invokeMethod(String.class,"valueOf",true,null,new Object[]{character})))))))))) {
                $line=37;
                $result=GCollections.asList(simbolo,character,"dn");
                if (true) break $try;
              }
              else {
                $line=38;
                $result=GCollections.asList('=',"10","err");
                if (true) break $try;
              }
            }
          }
        }
      }
      $line=42;
      $rethrow(new RuntimeException("The function \"\u03B4(\u27E8simbolo,anterior,state\u27E9:java.lang.Iterable,character:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,task1.class,"\u03B4",$line);
    }
    return $result;
  }
}
